// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240520024713_Add CreationDate Field to Journal")]
    partial class AddCreationDateFieldtoJournal
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.0");

            modelBuilder.Entity("Domain.Activity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Category")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.Property<string>("Venue")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("Domain.EmotionScore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<float>("Anger")
                        .HasColumnType("REAL");

                    b.Property<float>("Disgust")
                        .HasColumnType("REAL");

                    b.Property<float>("Fear")
                        .HasColumnType("REAL");

                    b.Property<Guid>("FkJournal")
                        .HasColumnType("TEXT");

                    b.Property<float>("Joy")
                        .HasColumnType("REAL");

                    b.Property<float>("Sadness")
                        .HasColumnType("REAL");

                    b.Property<float>("Surprise")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("FkJournal")
                        .IsUnique();

                    b.ToTable("EmotionScores");
                });

            modelBuilder.Entity("Domain.Journal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("EmotionColor")
                        .HasColumnType("TEXT");

                    b.Property<int>("EmotionPrimary")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Text")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Journals");
                });

            modelBuilder.Entity("Domain.EmotionScore", b =>
                {
                    b.HasOne("Domain.Journal", "Journal")
                        .WithOne("EmotionScore")
                        .HasForeignKey("Domain.EmotionScore", "FkJournal")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Journal");
                });

            modelBuilder.Entity("Domain.Journal", b =>
                {
                    b.Navigation("EmotionScore");
                });
#pragma warning restore 612, 618
        }
    }
}
